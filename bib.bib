@incollection{DBLP:reference/mc/BarrettT18,
  author    = {Clark Barrett and
               Cesare Tinelli},
  title     = {Satisfiability Modulo Theories},
  booktitle = {Handbook of Model Checking.},
  pages     = {305--343},
  year      = {2018},
  crossref  = {DBLP:reference/mc/2018},
  url       = {https://doi.org/10.1007/978-3-319-10575-8\_11},
  doi       = {10.1007/978-3-319-10575-8\_11},
  timestamp = {Tue, 29 May 2018 12:30:27 +0200},
  biburl    = {https://dblp.org/rec/bib/reference/mc/BarrettT18},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@book{DBLP:books/daglib/0020348,
  author    = {Christel Baier and
               Joost{-}Pieter Katoen},
  title     = {Principles of model checking},
  publisher = {{MIT} Press},
  year      = {2008},
  isbn      = {978-0-262-02649-9},
  timestamp = {Tue, 15 Feb 2011 11:22:37 +0100},
  biburl    = {https://dblp.org/rec/bib/books/daglib/0020348},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}


@article{DBLP:journals/csur/BaldoniCDDF18,
  author    = {Roberto Baldoni and
               Emilio Coppa and
               Daniele Cono D'Elia and
               Camil Demetrescu and
               Irene Finocchi},
  title     = {A Survey of Symbolic Execution Techniques},
  journal   = {{ACM} Comput. Surv.},
  volume    = {51},
  number    = {3},
  pages     = {50:1--50:39},
  year      = {2018},
  url       = {http://doi.acm.org/10.1145/3182657},
  doi       = {10.1145/3182657},
  timestamp = {Thu, 26 Jul 2018 15:12:32 +0200},
  biburl    = {https://dblp.org/rec/bib/journals/csur/BaldoniCDDF18},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@misc{synth,
  author = {James Bornholt},
  title = {Program Synthesis Explained},
  howpublished = "\url{https://homes.cs.washington.edu/~bornholt/post/synthesis-explained.html}",
  year = {2015}, 
  note = "[Online; accessed 28-August-2018]"
}

@article{DBLP:journals/corr/abs-1111-5652,
  author    = {Alexander Fuchs and
               Amit Goel and
               Jim Grundy and
               Sava Krstic and
               Cesare Tinelli},
  title     = {Ground interpolation for the theory of equality},
  journal   = {Logical Methods in Computer Science},
  volume    = {8},
  number    = {1},
  year      = {2012},
  url       = {https://doi.org/10.2168/LMCS-8(1:6)2012},
  doi       = {10.2168/LMCS-8(1:6)2012},
  timestamp = {Mon, 13 Aug 2018 16:46:33 +0200},
  biburl    = {https://dblp.org/rec/bib/journals/corr/abs-1111-5652},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@InProceedings{10.1007/978-3-642-14052-5_14,
author="B{\"o}hme, Sascha
and Weber, Tjark",
editor="Kaufmann, Matt
and Paulson, Lawrence C.",
title="Fast LCF-Style Proof Reconstruction for Z3",
booktitle="Interactive Theorem Proving",
year="2010",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="179--194",
abstract="The Satisfiability Modulo Theories (SMT) solver Z3 can generate proofs of unsatisfiability. We present independent reconstruction of these proofs in the theorem provers Isabelle/HOL and HOL4 with particular focus on efficiency. Our highly optimized implementations outperform previous LCF-style proof checkers for SMT, often by orders of magnitude. Detailed performance data shows that LCF-style proof reconstruction can be faster than proof search in Z3.",
isbn="978-3-642-14052-5"
}

@InProceedings{10.1007/978-3-642-22438-6_11,
	author="Blanchette, Jasmin Christian
	and B{\"o}hme, Sascha
	and Paulson, Lawrence C.",
	editor="Bj{\o}rner, Nikolaj
	and Sofronie-Stokkermans, Viorica",
	title="Extending Sledgehammer with SMT Solvers",
	booktitle="Automated Deduction -- CADE-23",
	year="2011",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="116--130",
	abstract="Sledgehammer is a component of Isabelle/HOL that employs first-order automatic theorem provers (ATPs) to discharge goals arising in interactive proofs. It heuristically selects relevant facts and, if an ATP is successful, produces a snippet that replays the proof in Isabelle. We extended Sledgehammer to invoke satisfiability modulo theories (SMT) solvers as well, exploiting its relevance filter and parallel architecture. Isabelle users are now pleasantly surprised by SMT proofs for problems beyond the ATPs' reach. Remarkably, the best SMT solver performs better than the best ATP on most of our benchmarks.",
	isbn="978-3-642-22438-6"
}

@article{DBLP:journals/japll/MengP09,
	author    = {Jia Meng and
	Lawrence C. Paulson},
	title     = {Lightweight relevance filtering for machine-generated resolution problems},
	journal   = {J. Appl. Log.},
	volume    = {7},
	number    = {1},
	pages     = {41--57},
	year      = {2009},
	url       = {https://doi.org/10.1016/j.jal.2007.07.004},
	doi       = {10.1016/j.jal.2007.07.004},
	timestamp = {Fri, 21 Feb 2020 13:13:00 +0100},
	biburl    = {https://dblp.org/rec/journals/japll/MengP09.bib},
	bibsource = {dblp computer science bibliography, https://dblp.org}
}

@InProceedings{10.1007/978-3-642-22438-6_23,
	author="Hoder, Kry{\v{s}}tof
	and Voronkov, Andrei",
	editor="Bj{\o}rner, Nikolaj
	and Sofronie-Stokkermans, Viorica",
	title="Sine Qua Non for Large Theory Reasoning",
	booktitle="Automated Deduction -- CADE-23",
	year="2011",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="299--314",
	abstract="One possible way to deal with large theories is to have a good selection method for relevant axioms. This is confirmed by the fact that the largest available first-order knowledge base (the Open CYC) contains over 3 million axioms, while answering queries to it usually requires not more than a few dozen axioms. A method for axiom selection has been proposed by the first author in the Sumo INference Engine (SInE) system. SInE has won the large theory division of CASC in 2008. The method turned out to be so successful that the next two years it was used by the winner as well as by several other competing systems. This paper contains the presentation of the method and describes experiments with it in the theorem prover Vampire.",
	isbn="978-3-642-22438-6"
}

@InProceedings{10.1007/978-3-642-02959-2_13,
	author="Roederer, Alex
	and Puzis, Yury
	and Sutcliffe, Geoff",
	editor="Schmidt, Renate A.",
	title="Divvy: An ATP Meta-system Based on Axiom Relevance Ordering",
	booktitle="Automated Deduction -- CADE-22",
	year="2009",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="157--162",
	abstract="This paper describes two syntactic relevance orderings on the axioms available for proving a given conjecture, and an ATP meta-system that uses the orderings to select axioms to use in proof attempts. The system has been evaluated, and the results show that it is effective.",
	isbn="978-3-642-02959-2"
}

@article{DBLP:journals/jar/AlamaHKTU14,
	author    = {Jesse Alama and
	Tom Heskes and
	Daniel K{\"{u}}hlwein and
	Evgeni Tsivtsivadze and
	Josef Urban},
	title     = {Premise Selection for Mathematics by Corpus Analysis and Kernel Methods},
	journal   = {J. Autom. Reason.},
	volume    = {52},
	number    = {2},
	pages     = {191--213},
	year      = {2014},
	url       = {https://doi.org/10.1007/s10817-013-9286-5},
	doi       = {10.1007/s10817-013-9286-5},
	timestamp = {Wed, 02 Sep 2020 13:29:52 +0200},
	biburl    = {https://dblp.org/rec/journals/jar/AlamaHKTU14.bib},
	bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{DBLP:conf/cade/KaliszykU13a,
	author    = {Cezary Kaliszyk and
	Josef Urban},
	editor    = {Jasmin Christian Blanchette and
	Josef Urban},
	title     = {Stronger Automation for Flyspeck by Feature Weighting and Strategy
	Evolution},
	booktitle = {Third International Workshop on Proof Exchange for Theorem Proving,
	PxTP 2013, Lake Placid, NY, USA, June 9-10, 2013},
	series    = {EPiC Series in Computing},
	volume    = {14},
	pages     = {87--95},
	publisher = {EasyChair},
	year      = {2013},
	url       = {https://easychair.org/publications/paper/VZv6},
	timestamp = {Wed, 27 May 2020 16:02:35 +0200},
	biburl    = {https://dblp.org/rec/conf/cade/KaliszykU13a.bib},
	bibsource = {dblp computer science bibliography, https://dblp.org}
}

@InProceedings{10.1007/978-3-540-73595-3_20,
	author="Sutcliffe, Geoff
	and Puzis, Yury",
	editor="Pfenning, Frank",
	title="SRASS - A Semantic Relevance Axiom Selection System",
	booktitle="Automated Deduction -- CADE-21",
	year="2007",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="295--310",
	abstract="This paper describes the design, implementation, and testing of a system for selecting necessary axioms from a large set also containing superfluous axioms, to obtain a proof of a conjecture. The selection is determined by semantics of the axioms and conjecture, ordered heuristically by a syntactic relevance measure. The system is able to solve many problems that cannot be solved alone by the underlying conventional automated reasoning system.",
	isbn="978-3-540-73595-3"
}

@article{DBLP:journals/corr/KaliszykU13b,
	author    = {Cezary Kaliszyk and
	Josef Urban},
	title     = {MizAR 40 for Mizar 40},
	journal   = {CoRR},
	volume    = {abs/1310.2805},
	year      = {2013},
	url       = {http://arxiv.org/abs/1310.2805},
	archivePrefix = {arXiv},
	eprint    = {1310.2805},
	timestamp = {Mon, 13 Aug 2018 16:47:12 +0200},
	biburl    = {https://dblp.org/rec/journals/corr/KaliszykU13b.bib},
	bibsource = {dblp computer science bibliography, https://dblp.org}
}

@InProceedings{10.1007/978-3-642-31365-3_30,
	author="K{\"u}hlwein, Daniel
	and van Laarhoven, Twan
	and Tsivtsivadze, Evgeni
	and Urban, Josef
	and Heskes, Tom",
	editor="Gramlich, Bernhard
	and Miller, Dale
	and Sattler, Uli",
	title="Overview and Evaluation of Premise Selection Techniques for Large Theory Mathematics",
	booktitle="Automated Reasoning",
	year="2012",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="378--392",
	abstract="In this paper, an overview of state-of-the-art techniques for premise selection in large theory mathematics is provided, and new premise selection techniques are introduced. Several evaluation metrics are introduced, compared and their appropriateness is discussed in the context of automated reasoning in large theory mathematics. The methods are evaluated on the MPTP2078 benchmark, a subset of the Mizar library, and a 10{\%} improvement is obtained over the best method so far.",
	isbn="978-3-642-31365-3"
}

@article{DBLP:journals/jar/MengP08,
	author    = {Jia Meng and
	Lawrence C. Paulson},
	title     = {Translating Higher-Order Clauses to First-Order Clauses},
	journal   = {J. Autom. Reason.},
	volume    = {40},
	number    = {1},
	pages     = {35--60},
	year      = {2008},
	url       = {https://doi.org/10.1007/s10817-007-9085-y},
	doi       = {10.1007/s10817-007-9085-y},
	timestamp = {Wed, 02 Sep 2020 13:29:47 +0200},
	biburl    = {https://dblp.org/rec/journals/jar/MengP08.bib},
	bibsource = {dblp computer science bibliography, https://dblp.org}
}

@InProceedings{10.1007/978-3-540-74591-4_18,
	author="Paulson, Lawrence C.
	and Susanto, Kong Woei",
	editor="Schneider, Klaus
	and Brandt, Jens",
	title="Source-Level Proof Reconstruction for Interactive Theorem Proving",
	booktitle="Theorem Proving in Higher Order Logics",
	year="2007",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="232--245",
	abstract="Interactive proof assistants should verify the proofs they receive from automatic theorem provers. Normally this proof reconstruction takes place internally, forming part of the integration between the two tools. We have implemented source-level proof reconstruction: resolution proofs are automatically translated to Isabelle proof scripts. Users can insert this text into their proof development or (if they wish) examine it manually. Each step of a proof is justified by calling Hurd's Metis prover, which we have ported to Isabelle. A recurrent issue in this project is the treatment of Isabelle's axiomatic type classes.",
	isbn="978-3-540-74591-4"
}

@InProceedings{10.1007/978-3-642-38574-2_18,
	author="Kaliszyk, Cezary
	and Urban, Josef",
	editor="Bonacina, Maria Paola",
	title="PRocH: Proof Reconstruction for HOL Light",
	booktitle="Automated Deduction -- CADE-24",
	year="2013",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="267--274",
	abstract="PRocH is a proof reconstruction tool that imports in HOL Light proofs produced by ATPs on the recently developed translation of HOL Light and Flyspeck problems to ATP formats. PRocH combines several reconstruction methods in parallel, but the core improvement over previous methods is obtained by re-playing in the HOL logic the detailed inference steps recorded in the ATP (TPTP) proofs, using several internal HOL Light inference methods. These methods range from fast variable matching and more involved rewriting, to full first-order theorem proving using the MESON tactic. The system is described and its performance is evaluated here on a large set of Flyspeck problems.",
	isbn="978-3-642-38574-2"
}

@techreport{10.5555/891954,
author = {Milner, Robin},
title = {Logic for Computable Functions: Description of a Machine Implementation.},
year = {1972},
publisher = {Stanford University},
address = {Stanford, CA, USA},
abstract = {This paper is primarily a user''s manual for LCF, a proof-checking program for a logic of computable functions proposed by Dana Scott in 1969 but unpublished by him. We use the name LCF also for the logic itself, which is presented at the start of the paper. The proof-checking program is designed to allow the user interactively to generate formal proofs about computable functions and functionals over a variety of domains, including those of interest to the computer scientist - for example, integers, lists and computer programs and their semantics. The user''s task is alleviated by two features: a subgoaling facility and a powerful simplification mechanism. Applications include proofs of program correctness and in particular of compiler correctness; these applications are not discussed herein, but are illustrated in the papers referenced in this introduction.}
}

@Inbook{Loeckx1987,
author="Loeckx, Jacques
and Sieber, Kurt",
title="LCF, A Logic for Computable Functions",
bookTitle="The Foundations of Program Verification",
year="1987",
publisher="Vieweg+Teubner Verlag",
address="Wiesbaden",
pages="199--214",
abstract="LCF consists of a logic for cpo's and continuous functions, and of a corresponding calculus allowing in particular the formal verification of programs. It differs from the Hoare logic and calculus in the following points. First, the Hoare calculus was developed for a particular programming language, namely the while-programming language. LCF was developed for cpo's and is applicable to any programming language whose semantics is denotationally described. Second, it is possible to formulate and prove total correctness in LCF as well as partial correctness. Properties like those in Examples 9.4 and 9.5 are also provable. Third, LCF does not build on the predicate logic, but instead starts from scratch. The reason is that it is necessary to consider the $\omega$-extensions of predicates, that is, those predicates with range Bool$\omega$, and not the `usual' predicates with range Bool. For a similar reason it was not possible in Section 3.3 to build the (operational) semantics of recursive programs on the predicate logic.",
isbn="978-3-322-96753-4",
doi="10.1007/978-3-322-96753-4_10",
url="https://doi.org/10.1007/978-3-322-96753-4_10"
}

@phdthesis{DBLP:phd/dnb/Bohme12,
  author    = {Sascha B{\"{o}}hme},
  title     = {Proving Theorems of Higher-Order Logic with {SMT} Solvers},
  school    = {Technical University Munich},
  year      = {2012},
  url       = {https://nbn-resolving.org/urn:nbn:de:bvb:91-diss-20120511-1084525-1-4},
  urn       = {urn:nbn:de:bvb:91-diss-20120511-1084525-1-4},
  timestamp = {Wed, 12 Feb 2020 16:42:39 +0100},
  biburl    = {https://dblp.org/rec/phd/dnb/Bohme12.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@Inbook{Tseitin1983,
author="Tseitin, G. S.",
editor="Siekmann, J{\"o}rg H.
and Wrightson, Graham",
title="On the Complexity of Derivation in Propositional Calculus",
bookTitle="Automation of Reasoning: 2: Classical Papers on Computational Logic 1967--1970",
year="1983",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="466--483",
abstract="The question of the minimum complexity of derivation of a given formula in classical propositional calculus is considered in this article and it is proved that estimates of complexity may vary considerably among the various forms of propositional calculus. The forms of propositional calculus used in the present article are somewhat unusual, {\textdagger} but the results obtained for them can, in principle, be extended to the usual forms of propositional calculus.",
isbn="978-3-642-81955-1",
doi="10.1007/978-3-642-81955-1_28",
url="https://doi.org/10.1007/978-3-642-81955-1_28"
}

@incollection{NONNENGART2001335,
title = "Chapter 6 - Computing Small Clause Normal Forms",
editor = "Alan Robinson and Andrei Voronkov",
booktitle = "Handbook of Automated Reasoning",
publisher = "North-Holland",
address = "Amsterdam",
pages = "335 - 367",
year = "2001",
series = "Handbook of Automated Reasoning",
isbn = "978-0-444-50813-3",
doi = "https://doi.org/10.1016/B978-044450813-3/50008-4",
url = "http://www.sciencedirect.com/science/article/pii/B9780444508133500084",
author = "Andreas Nonnengart and Christoph Weidenbach"
}

@inproceedings{10.1145/1670412.1670413,
author = {Brummayer, Robert and Biere, Armin},
title = {Fuzzing and Delta-Debugging SMT Solvers},
year = {2009},
isbn = {9781605584843},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1670412.1670413},
doi = {10.1145/1670412.1670413},
abstract = {SMT solvers are widely used as core engines in many applications. Therefore, robustness and correctness are essential criteria. Current testing techniques used by developers of SMT solvers do not satisfy the high demand for correct and robust solvers, as our testing experiments show. To improve this situation, we propose to complement traditional testing techniques with grammar-based blackbox fuzz testing, combined with delta-debugging. We demonstrate the effectiveness of our approach and report on critical bugs and incorrect results which we found in current state-of-the-art SMT solvers for bit-vectors and arrays.},
booktitle = {Proceedings of the 7th International Workshop on Satisfiability Modulo Theories},
pages = {1–5},
numpages = {5},
location = {Montreal, Canada},
series = {SMT '09}
}

@misc{mansur2020detecting,
      title={Detecting Critical Bugs in SMT Solvers Using Blackbox Mutational Fuzzing}, 
      author={Muhammad Numair Mansur and Maria Christakis and Valentin Wüstholz and Fuyuan Zhang},
      year={2020},
      eprint={2004.05934},
      archivePrefix={arXiv},
      primaryClass={cs.SE}
}

@InProceedings{10.1007/978-3-642-38916-0_3,
author="Artho, Cyrille
and Biere, Armin
and Seidl, Martina",
editor="Veanes, Margus
and Vigan{\`o}, Luca",
title="Model-Based Testing for Verification Back-Ends",
booktitle="Tests and Proofs",
year="2013",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="39--55",
abstract="Many verification tools used in practice rely on sophisticated SAT and SMT solvers. These reasoning engines are assumed and expected to be correct, but, in general, too complex to be fully verified. Therefore, effective testing techniques have to be employed. In this paper, we show how to employ model-based testing (MBT) to test sequences of application programming interface (API) calls and different system configurations. We applied this approach to our SAT solver Lingeling and compared it to existing testing approaches, revealing the effectiveness of MBT for the development of reliable SAT solvers.",
isbn="978-3-642-38916-0"
}

@InProceedings{10.1007/978-3-642-25379-9_15,
	author="B{\"o}hme, Sascha
	and Fox, Anthony C. J.
	and Sewell, Thomas
	and Weber, Tjark",
	editor="Jouannaud, Jean-Pierre
	and Shao, Zhong",
	title="Reconstruction of Z3's Bit-Vector Proofs in HOL4 and Isabelle/HOL",
	booktitle="Certified Programs and Proofs",
	year="2011",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="183--198",
	abstract="The Satisfiability Modulo Theories (SMT) solver Z3 can generate proofs of unsatisfiability. We present independent reconstruction of unsatisfiability proofs for bit-vector theories in the theorem provers HOL4 and Isabelle/HOL. Our work shows that LCF-style proof reconstruction for the theory of fixed-size bit-vectors, although difficult because Z3's proofs provide limited detail, is often possible. We thereby obtain high correctness assurances for Z3's results, and increase the degree of proof automation for bit-vector problems in HOL4 and Isabelle/HOL.",
	isbn="978-3-642-25379-9"
}

@article{DAWSON200955,
	title = "Isabelle Theories for Machine Words",
	journal = "Electronic Notes in Theoretical Computer Science",
	volume = "250",
	number = "1",
	pages = "55 - 70",
	year = "2009",
	note = "Proceedings of the Seventh International Workshop on Automated Verification of Critical Systems (AVoCS 2007)",
	issn = "1571-0661",
	doi = "https://doi.org/10.1016/j.entcs.2009.08.005",
	url = "http://www.sciencedirect.com/science/article/pii/S1571066109003302",
	author = "Jeremy Dawson",
	keywords = "machine words, twos-complement, mechanised reasoning",
	abstract = "We describe a collection of Isabelle theories which facilitate reasoning about machine words. For each possible word length, the words of that length form a type, and most of our work consists of generic theorems which can be applied to any such type. We develop the relationships between these words and integers (signed and unsigned), lists of booleans and functions from index to value, noting how these relationships are similar to those between an abstract type and its representing set. We discuss how we used Isabelle's bin type, before and after it was changed from a datatype to an abstract type, and the techniques we used to retain, as nearly as possible, the convenience of primitive recursive definitions. We describe other useful techniques, such as encoding the word length in the type."
}

@InProceedings{10.1007/BFb0060623,
	author="de Bruijn, N. G.",
	editor="Laudet, M.
	and Lacombe, D.
	and Nolin, L.
	and Sch{\"u}tzenberger, M.",
	title="The mathematical language AUTOMATH, its usage, and some of its extensions",
	booktitle="Symposium on Automatic Demonstration",
	year="1970",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="29--61",
	isbn="978-3-540-36262-3"
}

@INPROCEEDINGS{113737,
	author={S. F. {Allen} and R. L. {Constable} and D. J. {Howe} and W. E. {Aitken}},
	booktitle={[1990] Proceedings. Fifth Annual IEEE Symposium on Logic in Computer Science}, 
	title={The semantics of reflected proof}, 
	year={1990},
	volume={},
	number={},
	pages={95-105},
	doi={10.1109/LICS.1990.113737}}

@InProceedings{10.1007/978-3-642-39799-8_1,
	author="Kov{\'a}cs, Laura
	and Voronkov, Andrei",
	editor="Sharygina, Natasha
	and Veith, Helmut",
	title="First-Order Theorem Proving and Vampire",
	booktitle="Computer Aided Verification",
	year="2013",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="1--35",
	abstract="In this paper we give a short introduction in first-order theorem proving and the use of the theorem prover Vampire. We discuss the superposition calculus and explain the key concepts of saturation and redundancy elimination, present saturation algorithms and preprocessing, and demonstrate how these concepts are implemented in Vampire. Further, we also cover more recent topics and features of Vampire designed for advanced applications, including satisfiability checking, theory reasoning, interpolation, consequence elimination, and program analysis.",
	isbn="978-3-642-39799-8"
}

@article{10.5555/1218615.1218621,
	author = {Schulz, Stephan},
	title = {E - a Brainiac Theorem Prover},
	year = {2002},
	issue_date = {August 2002},
	publisher = {IOS Press},
	address = {NLD},
	volume = {15},
	number = {2,3},
	issn = {0921-7126},
	abstract = {We describe the superposition-based theorem prover E. E is a sound and complete prover for clausal first order logic with equality. Important properties of the prover include strong redundancy elimination criteria, the DISCOUNT loop proof procedure, a very flexible interface for specifying search control heuristics, and an efficient inference engine. We also discuss strength and weaknesses of the system.},
	journal = {AI Commun.},
	month = aug,
	pages = {111–126},
	numpages = {16},
	keywords = {Theorem proving, search control, superposition, E, rewriting}
}

@InProceedings{10.1007/978-3-642-02959-2_10,
	author="Weidenbach, Christoph
	and Dimova, Dilyana
	and Fietzke, Arnaud
	and Kumar, Rohit
	and Suda, Martin
	and Wischnewski, Patrick",
	editor="Schmidt, Renate A.",
	title="SPASS Version 3.5",
	booktitle="Automated Deduction -- CADE-22",
	year="2009",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="140--145",
	abstract="SPASS is an automated theorem prover for full first-order logic with equality and a number of non-classical logics. This system description provides an overview of our recent developments in SPASS 3.5 including subterm contextual rewriting, improved split backtracking, a significantly faster FLOTTER implementation with additional control flags, completely symmetric implementation of forward and backward redundancy criteria, faster parsing with improved support for big files, faster and extended sort module, and support for include commands in input files. Finally, SPASS 3.5 can now parse files in TPTP syntax, comes with a new converter tptp2dfg and is distributed under a BSD style license.",
	isbn="978-3-642-02959-2"
}

@Article{Sut17,
	Author       = "Sutcliffe, G.",
	Year         = "2017",
	Title        = "{The TPTP Problem Library and Associated Infrastructure.
	From CNF to TH0, TPTP v6.4.0}",
	Journal      = "Journal of Automated Reasoning",
	Volume       = "59",
	Number       = "4",
	Pages        = "483-502"
}

@inproceedings{DBLP:journals/corr/EkiciKKMRT16,
	author    = {Burak Ekici and
	Guy Katz and
	Chantal Keller and
	Alain Mebsout and
	Andrew J. Reynolds and
	Cesare Tinelli},
	editor    = {Jasmin Christian Blanchette and
	Cezary Kaliszyk},
	title     = {Extending SMTCoq, a Certified Checker for {SMT} (Extended Abstract)},
	booktitle = {Proceedings First International Workshop on Hammers for Type Theories,
	HaTT@IJCAR 2016, Coimbra, Portugal, July 1, 2016},
	series    = {{EPTCS}},
	volume    = {210},
	pages     = {21--29},
	year      = {2016},
	url       = {https://doi.org/10.4204/EPTCS.210.5},
	doi       = {10.4204/EPTCS.210.5},
	timestamp = {Sat, 19 Oct 2019 19:22:55 +0200},
	biburl    = {https://dblp.org/rec/journals/corr/EkiciKKMRT16.bib},
	bibsource = {dblp computer science bibliography, https://dblp.org}
}

@incollection{DBLP:reference/mc/BarrettT18,
	author    = {Clark W. Barrett and
	Cesare Tinelli},
	editor    = {Edmund M. Clarke and
	Thomas A. Henzinger and
	Helmut Veith and
	Roderick Bloem},
	title     = {Satisfiability Modulo Theories},
	booktitle = {Handbook of Model Checking},
	pages     = {305--343},
	publisher = {Springer},
	year      = {2018},
	url       = {https://doi.org/10.1007/978-3-319-10575-8\_11},
	doi       = {10.1007/978-3-319-10575-8\_11},
	timestamp = {Mon, 24 Jun 2019 15:54:17 +0200},
	biburl    = {https://dblp.org/rec/reference/mc/BarrettT18.bib},
	bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{DBLP:conf/cade/ReynoldsBLT20,
	author    = {Andrew Reynolds and
	Haniel Barbosa and
	Daniel Larraz and
	Cesare Tinelli},
	editor    = {Nicolas Peltier and
	Viorica Sofronie{-}Stokkermans},
	title     = {Scalable Algorithms for Abduction via Enumerative Syntax-Guided Synthesis},
	booktitle = {Automated Reasoning - 10th International Joint Conference, {IJCAR}
	2020, Paris, France, July 1-4, 2020, Proceedings, Part {I}},
	series    = {Lecture Notes in Computer Science},
	volume    = {12166},
	pages     = {141--160},
	publisher = {Springer},
	year      = {2020},
	url       = {https://doi.org/10.1007/978-3-030-51074-9\_9},
	doi       = {10.1007/978-3-030-51074-9\_9},
	timestamp = {Fri, 03 Jul 2020 13:41:25 +0200},
	biburl    = {https://dblp.org/rec/conf/cade/ReynoldsBLT20.bib},
	bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{DBLP:conf/cav/BarrettCDHJKRT11,
	author    = {Clark W. Barrett and
	Christopher L. Conway and
	Morgan Deters and
	Liana Hadarean and
	Dejan Jovanovic and
	Tim King and
	Andrew Reynolds and
	Cesare Tinelli},
	editor    = {Ganesh Gopalakrishnan and
	Shaz Qadeer},
	title     = {{CVC4}},
	booktitle = {Computer Aided Verification - 23rd International Conference, {CAV}
	2011, Snowbird, UT, USA, July 14-20, 2011. Proceedings},
	series    = {Lecture Notes in Computer Science},
	volume    = {6806},
	pages     = {171--177},
	publisher = {Springer},
	year      = {2011},
	url       = {https://doi.org/10.1007/978-3-642-22110-1\_14},
	doi       = {10.1007/978-3-642-22110-1\_14},
	biburl    = {https://dblp.org/rec/conf/cav/BarrettCDHJKRT11.bib},
	bibsource = {dblp computer science bibliography, https://dblp.org}
}

@InProceedings{10.1007/978-3-642-02959-2_12,
	author="Bouton, Thomas
	and Caminha B. de Oliveira, Diego
	and D{\'e}harbe, David
	and Fontaine, Pascal",
	editor="Schmidt, Renate A.",
	title="veriT: An Open, Trustable and Efficient SMT-Solver",
	booktitle="Automated Deduction -- CADE-22",
	year="2009",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="151--156",
	abstract="This article describes the first public version of the satisfiability modulo theory (SMT) solver veriT. It is open-source, proof-producing, and complete for quantifier-free formulas with uninterpreted functions and difference logic on real numbers and integers.",
	isbn="978-3-642-02959-2"
}

@InProceedings{10.1007/978-3-540-78800-3_24,
	author="de Moura, Leonardo
	and Bj{\o}rner, Nikolaj",
	editor="Ramakrishnan, C. R.
	and Rehof, Jakob",
	title="Z3: An Efficient SMT Solver",
	booktitle="Tools and Algorithms for the Construction and Analysis of Systems",
	year="2008",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="337--340",
	abstract="Satisfiability Modulo Theories (SMT) problem is a decision problem for logical first order formulas with respect to combinations of background theories such as: arithmetic, bit-vectors, arrays, and uninterpreted functions. Z3 is a new and efficient SMT Solver freely available from Microsoft Research. It is used in various software verification and analysis applications.",
	isbn="978-3-540-78800-3"
}

@InProceedings{10.1007/978-3-642-03359-9_4,
	author="Harrison, John",
	editor="Berghofer, Stefan
	and Nipkow, Tobias
	and Urban, Christian
	and Wenzel, Makarius",
	title="HOL Light: An Overview",
	booktitle="Theorem Proving in Higher Order Logics",
	year="2009",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="60--66",
	abstract="HOL Light is an interactive proof assistant for classical higher-order logic, intended as a clean and simplified version of Mike Gordon's original HOL system. Theorem provers in this family use a version of ML as both the implementation and interaction language; in HOL Light's case this is Objective CAML (OCaml). Thanks to its adherence to the so-called `LCF approach', the system can be extended with new inference rules without compromising soundness. While retaining this reliability and programmability from earlier HOL systems, HOL Light is distinguished by its clean and simple design and extremely small logical kernel. Despite this, it provides powerful proof tools and has been applied to some non-trivial tasks in the formalization of mathematics and industrial formal verification.",
	isbn="978-3-642-03359-9"
}

@InProceedings{10.1007/978-3-540-71067-7_6,
	author="Slind, Konrad
	and Norrish, Michael",
	editor="Mohamed, Otmane Ait
	and Mu{\~{n}}oz, C{\'e}sar
	and Tahar, Sofi{\`e}ne",
	title="A Brief Overview of HOL4",
	booktitle="Theorem Proving in Higher Order Logics",
	year="2008",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="28--32",
	abstract="The HOLF proof assistant supports specification and proof in classical higher order logic. It is the latest in a long line of similar systems. In this short overview, we give an outline of the HOLF system and how it may be applied in formal verification.",
	isbn="978-3-540-71067-7"
}

@InProceedings{10.1007/978-3-540-71067-7_7,
	author="Wenzel, Makarius
	and Paulson, Lawrence C.
	and Nipkow, Tobias",
	editor="Mohamed, Otmane Ait
	and Mu{\~{n}}oz, C{\'e}sar
	and Tahar, Sofi{\`e}ne",
	title="The Isabelle Framework",
	booktitle="Theorem Proving in Higher Order Logics",
	year="2008",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="33--38",
	abstract="Isabelle, which is available from http://isabelle.in.tum.de, is a generic framework for interactive theorem proving. The Isabelle/Pure meta-logic allows the formalization of the syntax and inference rules of a broad range of object-logics following the general idea of natural deduction [32,33]. The logical core is implemented according to the well-known ``LCF approach'' of secure inferences as abstract datatype constructors in ML [16]; explicit proof terms are also available [8]. Isabelle/Isar provides sophisticated extra-logical infrastructure supporting structured proofs and specifications, including concepts for modular theory development. Isabelle/HOL is a large application within the generic framework, with plenty of logic-specific add-on tools and a large theory library. Other notable object-logics are Isabelle/ZF (Zermelo-Fraenkel set-theory, see [34,36] and Isabelle/HOLCF [26] (Scott's domain theory within HOL). Users can build further formal-methods tools on top, e.g. see [53].",
	isbn="978-3-540-71067-7"
}

@Inbook{Thery2006,
	author="Th{\'e}ry, Laurent
	and Letouzey, Pierre
	and Gonthier, Georges",
	editor="Wiedijk, Freek",
	title="Coq",
	bookTitle="The Seventeen Provers of the World: Foreword by Dana S. Scott",
	year="2006",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="28--35",
	abstract="Statement",
	isbn="978-3-540-32888-9",
	doi="10.1007/11542384_6",
	url="https://doi.org/10.1007/11542384_6"
}

@InProceedings{10.1007/978-3-642-03359-9_6,
	author="Bove, Ana
	and Dybjer, Peter
	and Norell, Ulf",
	editor="Berghofer, Stefan
	and Nipkow, Tobias
	and Urban, Christian
	and Wenzel, Makarius",
	title="A Brief Overview of Agda -- A Functional Language with Dependent Types",
	booktitle="Theorem Proving in Higher Order Logics",
	year="2009",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="73--78",
	abstract="We give an overview of Agda, the latest in a series of dependently typed programming languages developed in Gothenburg. Agda is based on Martin-L{\"o}f's intuitionistic type theory but extends it with numerous programming language features. It supports a wide range of inductive data types, including inductive families and inductive-recursive types, with associated flexible pattern-matching. Unlike other proof assistants, Agda is not tactic-based. Instead it has an Emacs-based interface which allows programming by gradual refinement of incomplete type-correct terms.",
	isbn="978-3-642-03359-9"
}

@MANUAL{Jac96,
	author = {Paul B. Jackson},
	title = {The Nuprl Proof Development System, Version 4.2 Reference Manual and User's Guide},
	year = {1996},
	organization = {The PRL Group at Cornell University}
}

@inproceedings{10.5555/2032266.2032273,
	author = {Asperti, Andrea and Ricciotti, Wilmer and Coen, Claudio Sacerdoti and Tassi, Enrico},
	title = {The Matita Interactive Theorem Prover},
	year = {2011},
	isbn = {9783642224379},
	publisher = {Springer-Verlag},
	address = {Berlin, Heidelberg},
	abstract = {Matita is an interactive theorem prover being developed by the Helm team at the University of Bologna. Its stable version 0.5.x may be downloaded at http://matita.cs.unibo.it. The tool originated in the European project MoWGLI as a set of XML-based tools aimed to provide a mathematician-friendly web-interface to repositories of formal mathematical knoweldge, supporting advanced content-based functionalities for querying, searching and browsing the library. It has since then evolved into a fully fledged ITP, specifically designed as a light-weight, but competitive system, particularly suited for the assessment of innovative ideas, both at foundational and logical level. In this paper, we give an account of the whole system, its peculiarities and its main applications.},
	booktitle = {Proceedings of the 23rd International Conference on Automated Deduction},
	pages = {64–69},
	numpages = {6},
	location = {Wroc\l{}aw, Poland},
	series = {CADE'11}
}

@InProceedings{10.1007/978-3-319-21401-6_26,
	author="de Moura, Leonardo
	and Kong, Soonho
	and Avigad, Jeremy
	and van Doorn, Floris
	and von Raumer, Jakob",
	editor="Felty, Amy P.
	and Middeldorp, Aart",
	title="The Lean Theorem Prover (System Description)",
	booktitle="Automated Deduction - CADE-25",
	year="2015",
	publisher="Springer International Publishing",
	address="Cham",
	pages="378--388",
	abstract="Lean is a new open source theorem prover being developed at Microsoft Research and Carnegie Mellon University, with a small trusted kernel based on dependent type theory. It aims to bridge the gap between interactive and automated theorem proving, by situating automated tools and methods in a framework that supports user interaction and the construction of fully specified axiomatic proofs. Lean is an ongoing and long-term effort, but it already provides many useful components, integrated development environments, and a rich API which can be used to embed it into other systems. It is currently being used to formalize category theory, homotopy type theory, and abstract algebra. We describe the project goals, system architecture, and main features, and we discuss applications and continuing work.",
	isbn="978-3-319-21401-6"
}

@InProceedings{Dutertre:cav2014,
	author = 	 {Dutertre, Bruno},
	title = 	 {Yices 2.2},
	booktitle = {Computer-Aided Verification (CAV'2014)},
	editor =       {Biere, Armin and Bloem, Roderick},
	year = 	 2014,
	volume =       8559,
	series =       {Lecture Notes in Computer Science},
	pages =        {737--744},
	month = 	 {July},
	publisher =    {Springer}}

@inproceedings{10.5555/1770351.1770397,
	author = {Barrett, Clark and Tinelli, Cesare},
	title = {CVC3},
	year = {2007},
	isbn = {9783540733676},
	publisher = {Springer-Verlag},
	address = {Berlin, Heidelberg},
	abstract = {CVC3, a joint project of NYU and U Iowa, is the new and latest version of the Cooperating Validity Checker. CVC3 extends and builds on the functionality of its predecessors and includes many new features such as support for additional theories, an abstract architecture for Boolean reasoning, and SMT-LIB compliance. We describe the system and discuss some applications and continuing work.},
	booktitle = {Proceedings of the 19th International Conference on Computer Aided Verification},
	pages = {298–302},
	numpages = {5},
	location = {Berlin, Germany},
	series = {CAV'07}
}

@Inbook{Ahrendt1998,
	author="Ahrendt
	and Beckert
	and H{\"a}hnle
	and Menzel
	and Reif
	and Schellhorn
	and Schmitt",
	editor="Bibel, Wolfgang
	and Schmitt, Peter H.",
	title="Integrating Automated and Interactive Theorem Proving",
	bookTitle="Automated Deduction --- A Basis for Applications: Volume II: Systems and Implementation Techniques",
	year="1998",
	publisher="Springer Netherlands",
	address="Dordrecht",
	pages="97--116",
	abstract="Automated and interactive theorem proving are the two main directions in the field of deduction. Most chapters of this book belong to either the one or the other, whether focusing on theory, on methods or on systems. This reflects the fact that, for a long time, research in computer-aided reasoning was divided into these two directions, driven forward by different communities. Both groups offer powerful tools for different kinds of tasks, with different solutions, leading to different performance and application profiles. Some important examples are: ACL2 (Kaufmann and Moore, 1988), HOL (Gordon, 1988), IMPS (Farmer et al., 1996), Isabelle (Paulson, 1994), KIV (Reif et al., 1997) (see also Chapter II.1.1), NQTHM (Boyer and Moore, 1979), and PVS (Owre et al., 1992) for the interactive (or tactical) theorem proving community; and KoMeT (Bibel et al., 1994), Otter (Wos et al., 1992), Protein (Baumgartner and Furbach, 1994), Setheo (Goller et al., 1994), Spass (Weidenbach et al., 1996), and 3TAP (Beckert et al., 1996) for the automated theorem proving community.",
	isbn="978-94-017-0435-9",
	doi="10.1007/978-94-017-0435-9_4",
	url="https://doi.org/10.1007/978-94-017-0435-9_4"
}

@inproceedings{10.5555/648232.753129,
	author = {Beckert, Bernhard and H\"{a}hnle, Reiner and Oel, Peter and Sulzmann, Martin},
	title = {The Tableau-Based Theorem Prover 3TAP Version 4.0},
	year = {1996},
	isbn = {3540615113},
	publisher = {Springer-Verlag},
	address = {Berlin, Heidelberg},
	booktitle = {Proceedings of the 13th International Conference on Automated Deduction: Automated Deduction},
	pages = {303–307},
	numpages = {5},
	series = {CADE-13}
}

@Inbook{Reif1995,
	author="Reif, Wolfgang",
	editor="Broy, Manfred
	and J{\"a}hnichen, Stefan",
	title="The Kiv-approach to software verification",
	bookTitle="KORSO: Methods, Languages, and Tools for the Construction of Correct Software: Final Report",
	year="1995",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="339--368",
	abstract="This paper presents a particular approach to the design and verification of large sequential systems. It is based on structured algebraic specifications and stepwise refinement by program modules. The approach is implemented in Kiv (Karlsruhe Interactive Verifier), and supports the entire design process starting from formal specifications and ending with verified code. Its main characteristics are a strict decompositional design discipline for modular systems, a powerful proof component, and an evolutionary verification model supporting incremental error correction and verification. We present the design methodology for modular systems, a feasible verification method for single modules, and an evolutionary verification technique based on reuse of proofs. We report on the current performance of the system, compare it to others in the field, and discuss future perspectives.",
	isbn="978-3-540-47802-7",
	doi="10.1007/BFb0015471",
	url="https://doi.org/10.1007/BFb0015471"
}

@InProceedings{10.1007/10721959_10,
	author="Bezem, Marc
	and Hendriks, Dimitri
	and de Nivelle, Hans",
	editor="McAllester, David",
	title="Automated Proof Construction in Type Theory Using Resolution",
	booktitle="Automated Deduction - CADE-17",
	year="2000",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="148--163",
	abstract="We provide techniques to integrate resolution logic with equality in type theory. The results may be rendered as follows.",
	isbn="978-3-540-45101-3"
}

@InProceedings{10.1007/10721959_30,
	author="McCune, William
	and Shumsky, Olga",
	editor="McAllester, David",
	title="System Description: IVY",
	booktitle="Automated Deduction - CADE-17",
	year="2000",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="401--405",
	abstract="IVY is a verified theorem prover for first-order logic with equality. It is coded in ACL2, and it makes calls to the theorem prover Otter to search for proofs and to the program MACE to search for countermodels. Verifications of Otter and MACE are not practical because they are coded in C. Instead, Otter and MACE give detailed proofs and models that are checked by verified ACL2 programs. In addition, the initial conversion to clause form is done by verified ACL2 code. The verification is done with respect to finite interpretations.",
	isbn="978-3-540-45101-3"
}

@InProceedings{10.1007/978-3-540-71067-7_4,
	author="Kaufmann, Matt
	and Moore, J. Strother",
	editor="Mohamed, Otmane Ait
	and Mu{\~{n}}oz, C{\'e}sar
	and Tahar, Sofi{\`e}ne",
	title="An ACL2 Tutorial",
	booktitle="Theorem Proving in Higher Order Logics",
	year="2008",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="17--21",
	abstract="We describe a tutorial that demonstrates the use of the ACL2 theorem prover. We have three goals: to enable a motivated reader to start on a path towards effective use of ACL2; to provide ideas for other interactive theorem prover projects; and to elicit feedback on how we might incorporate features of other proof tools into ACL2.",
	isbn="978-3-540-71067-7"
}

@article{10.1023/A:1005843632307,
	author = {McCune, William and Wos, Larry},
	title = {Otter - The CADE-13 Competition Incarnations},
	year = {1997},
	issue_date = {April 1997},
	publisher = {Springer-Verlag},
	address = {Berlin, Heidelberg},
	volume = {18},
	number = {2},
	issn = {0168-7433},
	url = {https://doi.org/10.1023/A:1005843632307},
	doi = {10.1023/A:1005843632307},
	abstract = {This article discusses the two incarnations of Otter entered in the CADE-13 Automated Theorem Proving System Competition. Also presented are some historical background, a summary of applications that have led to new results in mathematics and logic, and a general discussion of Otter.},
	journal = {J. Autom. Reason.},
	month = apr,
	pages = {211–220},
	numpages = {10},
	keywords = {resolution, Otter, paramodulation, competition, automated theorem proving, equational deduction, automated reasoning}
}

@InProceedings{10.1007/3-540-55602-8_217,
	author="Owre, S.
	and Rushby, J. M.
	and Shankar, N.",
	editor="Kapur, Deepak",
	title="PVS: A prototype verification system",
	booktitle="Automated Deduction---CADE-11",
	year="1992",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="748--752",
	isbn="978-3-540-47252-0"
}

@InProceedings{10.1007/978-3-540-27813-9_40,
	author="Lahiri, Shuvendu K.
	and Seshia, Sanjit A.",
	editor="Alur, Rajeev
	and Peled, Doron A.",
	title="The UCLID Decision Procedure",
	booktitle="Computer Aided Verification",
	year="2004",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="475--478",
	abstract="UCLID is a tool for term-level modeling and verification of infinite-state systems expressible in the logic of counter arithmetic with lambda expressions and uninterpreted functions (CLU). In this paper, we describe a key component of the tool, the decision procedure for CLU. Apart from validity checking, the decision procedure also provides other useful features such as concrete counterexample generation and proof-core generation.",
	isbn="978-3-540-27813-9"
}

@INPROCEEDINGS{1698746,
	author={J. {Rushby}},
	booktitle={Fourth IEEE International Conference on Software Engineering and Formal Methods (SEFM'06)}, 
	title={Tutorial: Automated Formal Methods with PVS, SAL, and Yices}, 
	year={2006},
	volume={},
	number={},
	pages={262-262},
	doi={10.1109/SEFM.2006.37}}

@inproceedings{DBLP:conf/iccad/ManoliosS05,
	author    = {Panagiotis Manolios and
	Sudarshan K. Srinivasan},
	title     = {Verification of executable pipelined machines with bit-level interfaces},
	booktitle = {2005 International Conference on Computer-Aided Design, {ICCAD} 2005,
	San Jose, CA, USA, November 6-10, 2005},
	pages     = {855--862},
	publisher = {{IEEE} Computer Society},
	year      = {2005},
	url       = {https://doi.org/10.1109/ICCAD.2005.1560182},
	doi       = {10.1109/ICCAD.2005.1560182},
	timestamp = {Tue, 23 Jun 2020 17:42:41 +0200},
	biburl    = {https://dblp.org/rec/conf/iccad/ManoliosS05.bib},
	bibsource = {dblp computer science bibliography, https://dblp.org}
}

@InProceedings{10.1007/11691372_11,
	author="Fontaine, Pascal
	and Marion, Jean-Yves
	and Merz, Stephan
	and Nieto, Leonor Prensa
	and Tiu, Alwen",
	editor="Hermanns, Holger
	and Palsberg, Jens",
	title="Expressiveness + Automation + Soundness: Towards Combining SMT Solvers and Interactive Proof Assistants",
	booktitle="Tools and Algorithms for the Construction and Analysis of Systems",
	year="2006",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="167--181",
	abstract="Formal system development needs expressive specification languages, but also calls for highly automated tools. These two goals are not easy to reconcile, especially if one also aims at high assurances for correctness. In this paper, we describe a combination of Isabelle/HOL with a proof-producing SMT (Satisfiability Modulo Theories) solver that contains a SAT engine and a decision procedure for quantifier-free first-order logic with equality. As a result, a user benefits from the expressiveness of Isabelle/HOL when modeling a system, but obtains much better automation for those fragments of the proofs that fall within the scope of the (automatic) SMT solver. Soundness is not compromised because all proofs are submitted to the trusted kernel of Isabelle for certification. This architecture is straightforward to extend for other interactive proof assistants and proof-producing reasoners.",
	isbn="978-3-540-33057-8"
}

@article{article,
	author = {Czajka, Lukasz and Kaliszyk, Cezary},
	year = {2018},
	month = {06},
	pages = {},
	title = {Hammer for Coq: Automation for Dependent Type Theory},
	volume = {61},
	journal = {Journal of Automated Reasoning},
	doi = {10.1007/s10817-018-9458-4}
}

@InProceedings{10.1007/11527695_27,
	author="Mahajan, Yogesh S.
	and Fu, Zhaohui
	and Malik, Sharad",
	editor="Hoos, Holger H.
	and Mitchell, David G.",
	title="Zchaff2004: An Efficient SAT Solver",
	booktitle="Theory and Applications of Satisfiability Testing",
	year="2005",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="360--375",
	abstract="The Boolean Satisfiability Problem (SAT) is a well known NP-Complete problem. While its complexity remains a source of many interesting questions for theoretical computer scientists, the problem has found many practical applications in recent years. The emergence of efficient SAT solvers which can handle large structured SAT instances has enabled the use of SAT solvers in diverse domains such as electronic design automation and artificial intelligence. These applications continue to motivate the development of faster and more robust SAT solvers. In this paper, we describe the popular SAT solver zchaff with a focus on recent developments.",
	isbn="978-3-540-31580-3"
}

@inproceedings{10.5555/1661445.1661509,
	author = {Audemard, Gilles and Simon, Laurent},
	title = {Predicting Learnt Clauses Quality in Modern SAT Solvers},
	year = {2009},
	publisher = {Morgan Kaufmann Publishers Inc.},
	address = {San Francisco, CA, USA},
	abstract = {Beside impressive progresses made by SAT solvers over the last ten years, only few works tried to understand why Conflict Directed Clause Learning algorithms (CDCL) are so strong and efficient on most industrial applications. We report in this work a key observation of CDCL solvers behavior on this family of benchmarks and explain it by an unsuspected side effect of their particular Clause Learning scheme. This new paradigm allows us to solve an important, still open, question: How to designing a fast, static, accurate, and predictive measure of new learnt clauses pertinence. Our paper is followed by empirical evidences that show how our new learning scheme improves state-of-the art results by an order of magnitude on both SAT and UNSAT industrial problems.},
	booktitle = {Proceedings of the 21st International Jont Conference on Artifical Intelligence},
	pages = {399–404},
	numpages = {6},
	location = {Pasadena, California, USA},
	series = {IJCAI'09}
}
